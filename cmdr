#!/bin/bash

cmdr_cfg() {
    # CMDR_CMDS_PATH=<your_commands_path>
    # or delete the above line and set CMDR_CMDS_PATH in your shell
    [ ! -n "$CMDR_CMDS_PATH" ] && cmdr_err "CMDR_CMDS_PATH not set" && exit 1

    # CMDR_EXEC_SHELL=<prefered shell> # ex: "/bin/csh"
    # or delete the above line and set CMDR_EXEC_SHELL in your shell
    [ ! -n "$CMDR_EXEC_SHELL" ] && cmdr_err "CMDR_EXEC_SHELL not set" && exit 1

    CMDR_EDITOR='vim'

    CMDR_EXEC_FILE="/tmp/exec.cmds"

    [ ! -n "$CMDR_TEMP_CMDS" ] && CMDR_TEMP_CMDS="/tmp/cmds.tmp"

    CMDR_VAR_START='<:'
    CMDR_VAR_END=':>'
    CMDR_DISP_START='<'
    CMDR_DISP_END='>'
}

cmdr_help() {
    echo "\
    cmdr: the command runner
    desc: manage, search and execute your commands
    help: cmdr [args]
    args:
        -e, --edit              edit commands file
        -g, --grep    <regex>   grep for a particular command
        -x, --execute <regex>   execute a set of commands
        -a, --add     <regex>   add a set of commands to a file
        -h, --help              display this help\
    " | sed 's/^    //'
}

cmdr_err() {
    echo "err: $1"
    exit 1
}

cmdr_all_cmds() {
    # add check if $CMDR_CMDS_PATH is a directory then awk in all the files in the directory
    if [ -d $CMDR_CMDS_PATH ]; then
    awk '/```./{flag=1;next}/```/{flag=0}flag' $CMDR_CMDS_PATH/*
    else
    awk '/```./{flag=1;next}/```/{flag=0}flag' $CMDR_CMDS_PATH
    fi
}

cmdr_format() {
    cmds_disp=${1//$CMDR_VAR_START/$CMDR_DISP_START}
    cmds_disp=${cmds_disp//$CMDR_VAR_END/$CMDR_DISP_END}
}

cmdr_display() {
    echo "$1" | awk -F "\n" '{print NR ". " $1}'
}

cmdr_grep() {
    [ ! -n "$1" ] && cmdr_err "no regex provided"
    cmds=`cmdr_all_cmds | grep $1`
    [ "$cmds" == "" ] && cmdr_err "no commands found"
    cmdr_format "$cmds"
    cmdr_display "$cmds_disp"
}

cmdr_exec() {
    cmdr_grep "$1"
    selected_cmds=$(cmdr_select_cmds "$cmds")
    echo "#! $CMDR_EXEC_SHELL" > $CMDR_EXEC_FILE
    echo "$selected_cmds" >> $CMDR_EXEC_FILE
    chmod +x $CMDR_EXEC_FILE
    $CMDR_EXEC_FILE
    rm $CMDR_EXEC_FILE
}

cmdr_add() {
    cmdr_grep "$1"
    selected_cmds=$(cmdr_select_cmds "$cmds")
    [ ! -n "$CMDR_TEMP_CMDS" ] && cmdr_err "CMDR_TEMP_CMDS not set" && exit 1
    echo "$selected_cmds" > $CMDR_TEMP_CMDS
}

cmdr_final_cmd() {
    entry=$1
    cmd=$1
    while [[ $entry =~ $CMDR_VAR_START ]]; do
        entry=${entry#*$CMDR_VAR_START}
        key=${entry%%$CMDR_VAR_END*}

        read -p "$key: " val
        [ ! -n "$val" ] && echo "err: no value provided" && exit 1

        cmd=${cmd/$CMDR_VAR_START$key$CMDR_VAR_END/$val}
    done
    echo "$cmd"
}

cmdr_select_cmds() {
    selected_cmds=""
    read -p "Enter command numbers (separate by space): " cmd_nums
    for cmd_num in $cmd_nums; do
        cmd=$(echo "$1" | sed -n "${cmd_num}p")
        cmdr_format "$cmd"
        final_cmd=$(cmdr_final_cmd "$cmd")
        echo "echo \"$cmd_num ...\""
        echo "$final_cmd"
    done
    echo "echo \"done.\""
}

[ ! -n "$1" ] && cmdr_help && exit 0
cmdr_cfg
case $1 in
    --edit | -e)
        $CMDR_EDITOR $CMDR_CMDS_PATH
        ;;
    --grep | -g)
        cmdr_grep "$2"
        ;;
    --add | -a)
        cmdr_add "$2"
        ;;
    --execute | -x)
        cmdr_exec "$2"
        ;;
    --help | -h)
        cmdr_help
        ;;
    *)
        cmdr_err "not an arg: $1"
        ;;
esac
